/*
 * Copyright (c) Terl Tech Ltd • 09/05/18 18:38 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

plugins {
    id 'com.android.library'
    id 'signing'
    id 'maven'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.7.3"
}

ext {
    artifactId = "lazysodium-android"
    groupId = "com.goterl.lazycode"
    version = '2.4.1'
    description = "Lazysodium (Android) makes it effortless for Android " +
            "developers to get started with Libsodium's cryptography."
}

android {
    compileSdkVersion 28
    buildToolsVersion "27.0.3"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 13
        versionName project.ext.version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDirs = ['src/main/jniLibs']

        java {
            srcDir "../lazysodium-java/src/main/java"
            // Be sure to update lint.xml in the project root if any other
            // excluded files are added.
            exclude "com/goterl/lazycode/lazysodium/utils/NativeUtils.java"
            exclude "com/goterl/lazycode/lazysodium/SodiumJava.java"
            exclude "com/goterl/lazycode/lazysodium/LazySodiumJava.java"
        }
    }
    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }
}

tasks.withType(Javadoc).all { enabled = false }

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation("com.android.support.test.espresso:espresso-core:2.2.2", {
        exclude group: "com.android.support", module: "support-annotations"
    })
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    testImplementation 'junit:junit:4.12'
    api 'net.java.dev.jna:jna:4.5.1@aar'
}

// Tasks
signing {
    // This will use the GPG Agent
    // to sign the jar
  useGpgCmd()
  sign configurations.archives
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


task signPom(type: Sign) {
    sign project.file("$buildDir/publications/mavenJava/pom-default.xml")

    // The signing plugin does not seem to notice
    // it when the publications folder with the
    // signature has been deleted. So we always
    // create a new signature
    outputs.upToDateWhen { false }
}

artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.ext.groupId
            artifactId project.ext.artifactId
            version project.ext.version

            artifact bundleRelease
            artifact sourcesJar
            artifact javadocJar


            project.tasks.withType(Sign) {
              onlyIf { false }
            }

            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.ext.description)
                root.appendNode('name', project.ext.artifactId)
                root.appendNode('url', 'https://github.com/terl/lazysodium-android')

                def scm = root.appendNode('scm')
                scm.appendNode("connection", "scm:git:git://github.com/terl/lazysodium-android.git")
                scm.appendNode("developerConnection", "scm:git:ssh://github.com/terl/lazysodium-android")
                scm.appendNode("url", "http://github.com/terl/lazysodium-android")

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Mozilla Public License, Version 2.0')
                license.appendNode('url', 'http://www.mozilla.org/MPL/2.0/index.txt')
                license.appendNode('distribution', 'repo')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('name', 'Terl Tech Ltd')
                developer.appendNode('email', 'hello@terl.co')

                def dependenciesNode = root.appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    if(it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}


bintray {
    user = findProperty("bintray.user")
    key = findProperty("bintray.apiKey")
    publications = ['mavenJava']
    publish = true
    pkg {
        repo = 'lazysodium-maven'
        name = project.ext.artifactId
        userOrg = 'terl'
        desc = project.ext.description
        licenses = ['MPL-2.0']
        issueTrackerUrl = "https://github.com/terl/lazysodium-android/issues"
        vcsUrl = 'https://github.com/terl/lazysodium-android.git'

        version {
            name = project.ext.version
            released = new java.util.Date()
            vcsTag = project.ext.version
        }
    }
}


model {
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.withType(Sign)
    }
}
